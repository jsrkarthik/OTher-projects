import math
import numpy as np
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import cm
from matplotlib.ticker import LinearLocator
import matplotlib.pyplot as plt

def calculateE(alpha,beta):
    alpha=float(format(alpha,'.2f'))
    beta=float(format(beta,'.2f'))
    gamma=1-float(alpha)-float(beta)
    if alpha == 0:
       alphapart=0
    else:
       alphapart = (-alpha*(math.log(alpha)))
    if beta == 0:
       betapart=0
    else:
       betapart = (-beta*(math.log(beta)))
    if gamma == 0:
       gammapart=0
    else:
       print alpha,beta,gamma
       gammapart = (-gamma*(math.log(gamma)))
    Ey= -alphapart-betapart-gammapart
    print "Ey=%f"%(Ey)
    return Ey
       
    

def main():
	
	Z=np.zeros((101,101))
	X=np.zeros(101)
	Y=np.zeros(101)
	i=0
	k=0
	while i<=1:
	      X[k]=i
	      Y[k]=i
	      i+=0.01
	      k+=1
	c=0
	i=0
	while i<=100:
	    j=0
	    while j<=100:
	      if((i*1.0/100)+(j*1.0/100)<1.0):			
		Z[i][j]=(calculateE(i*1.0/100,j*1.0/100))
		#print i,j,Z[i][j]
		c+=1
	      j+=1
	    i+=1
	
	zlen=len(Z)
	fig = plt.figure()
	ax = fig.gca(projection='3d')
	#X,Y= np.mgrid[0:1:100j,0:1:100j]
	xlen=len(X)
	ylen=len(Y)
	colortuple = ('y', 'b')
	colors = np.empty(X.shape, dtype=str)	
	print xlen,ylen,zlen
	XX,YY=np.meshgrid(X,Y)
	i=0
	while i<=100:
	 j=0
	 while j<=100:
	  print Z[i][j],
	  j+=1
	 i+=1
	 print "\n" 
	ax = fig.add_subplot(1,1,1, projection='3d')
	surf = ax.plot_surface(XX,YY,Z)
	plt.show()
	i=0



main()
